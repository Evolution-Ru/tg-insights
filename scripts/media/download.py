#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ (<5 –º–∏–Ω—É—Ç).
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Telegram rate limits.
"""
import asyncio
import sqlite3
import json
import os
import time
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(Path("data/accounts/ychukaev/.env"))

api_id = os.getenv("TELEGRAM_API_ID")
api_hash = os.getenv("TELEGRAM_API_HASH")
session_string = os.getenv("TELEGRAM_SESSION_STRING")

db_path = Path("data/accounts/ychukaev/messages.sqlite")
media_dir = Path("data/accounts/ychukaev/media")

media_dir.mkdir(parents=True, exist_ok=True)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Telegram)
PARALLEL_DOWNLOADS = 20


def is_audio_or_video(json_str: str) -> tuple[bool, str | None, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–¥–∏–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∏ –µ—Å—Ç—å –ª–∏ –∑–≤—É–∫.
    
    Returns:
        (is_media, media_type, has_sound):
        - is_media: True –µ—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        - media_type: "audio" –∏–ª–∏ "video"
        - has_sound: False –µ—Å–ª–∏ Telegram –ø–æ–º–µ—Ç–∏–ª "nosound": true
    """
    try:
        data = json.loads(json_str)
        media = data.get("media")
        if not media:
            return False, None, True
        
        if media.get("_") == "MessageMediaDocument":
            doc = media.get("document") or {}
            mime = doc.get("mime_type") or ""
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
            if mime.startswith("image/"):
                return False, None, True
            
            # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
            for attr in doc.get("attributes", []) or []:
                kind = attr.get("_")
                if kind == "DocumentAttributeAudio":
                    return True, "audio", True
                if kind == "DocumentAttributeVideo":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ nosound
                    has_sound = not attr.get("nosound", False)
                    return True, "video", has_sound
        
        return False, None, True
    except Exception:
        return False, None, True


def get_duration(json_str: str) -> int | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    try:
        data = json.loads(json_str)
        media = data.get("media") or {}
        doc = media.get("document") or {}
        
        for attr in doc.get("attributes", []) or []:
            duration = attr.get("duration")
            if duration is not None:
                return int(duration)
        
        return None
    except Exception:
        return None


async def download_one_file(client, semaphore, conn, idx, total, chat_id, message_id, json_str, media_type, duration):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits."""
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —É–∂–µ
            existing = list(media_dir.glob(f"{chat_id}_{message_id}.*"))
            if existing:
                conn.execute(
                    "UPDATE messages SET media_path = ? WHERE chat_id = ? AND message_id = ?",
                    (str(existing[0].absolute()), chat_id, message_id)
                )
                conn.commit()
                return {"status": "exists", "file": existing[0].name}
            
            # –ü–æ–ª—É—á–∞–µ–º entity
            try:
                entity = await client.get_entity(chat_id)
            except Exception:
                await asyncio.sleep(1)
                entity = await client.get_entity(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await client.get_messages(entity, ids=message_id)
            
            if not message or not message.media:
                return {"status": "no_media"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –∏–∑ Telegram API
            actual_duration = None
            file_size = None
            if message.file:
                actual_duration = message.file.duration
                file_size = message.file.size
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã >5 –º–∏–Ω—É—Ç
            if actual_duration and actual_duration > 300:
                conn.execute(
                    "UPDATE messages SET long_media = 1, duration_seconds = ? WHERE chat_id = ? AND message_id = ?",
                    (actual_duration, chat_id, message_id)
                )
                conn.commit()
                return {"status": "too_long", "duration": actual_duration}
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            duration_str = f"{actual_duration or duration or '?'}s"
            size_mb = f"{file_size / 1024 / 1024:.2f}MB" if file_size else "?"
            print(f"[{idx}/{total}] üì• {media_type} {duration_str} {size_mb}: {chat_id}/{message_id}", flush=True)
            
            start_time = time.time()
            file_path = await client.download_media(
                message.media,
                file=str(media_dir)
            )
            download_time = time.time() - start_time
            
            if file_path:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                downloaded_path = Path(file_path)
                ext = downloaded_path.suffix
                new_path = media_dir / f"{chat_id}_{message_id}{ext}"
                
                if downloaded_path != new_path:
                    downloaded_path.rename(new_path)
                    file_path = str(new_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                conn.execute(
                    """UPDATE messages 
                       SET media_path = ?, 
                           media_kind = ?, 
                           duration_seconds = ?
                       WHERE chat_id = ? AND message_id = ?""",
                    (str(Path(file_path).absolute()), media_type, actual_duration or duration, chat_id, message_id)
                )
                conn.commit()
                print(f"   ‚úì –°–∫–∞—á–∞–Ω–æ –∑–∞ {download_time:.1f}s", flush=True)
                return {"status": "downloaded", "time": download_time, "size": file_size}
            else:
                return {"status": "failed"}
        
        except FloodWaitError as e:
            # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
            print(f"   ‚è± FloodWait {e.seconds}s –¥–ª—è {chat_id}/{message_id}", flush=True)
            await asyncio.sleep(e.seconds)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            return await download_one_file(client, semaphore, conn, idx, total, chat_id, message_id, json_str, media_type, duration)
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ {chat_id}/{message_id}: {e}", flush=True)
            return {"status": "error", "error": str(e)}


async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)...", flush=True)
    print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤", flush=True)
    print("=" * 60, flush=True)
    
    print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_path}", flush=True)
    conn = sqlite3.connect(str(db_path), timeout=10, check_same_thread=False)
    print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î", flush=True)
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    denied_ids = set()
    try:
        cur = conn.execute("SELECT dialog_id FROM dialog_denied")
        for (did,) in cur.fetchall():
            try:
                denied_ids.add(int(did))
            except Exception:
                continue
    except Exception:
        pass  # –¢–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    
    if denied_ids:
        print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–≤: {len(denied_ids)}", flush=True)
    
    print("üìä –ü–æ–¥—Å—á—ë—Ç –º–µ–¥–∏–∞...", flush=True)
    
    rows = conn.execute("""
        SELECT chat_id, message_id, json
        FROM messages
        WHERE json LIKE '%"media":%'
          AND date >= date('now', '-6 months')
          AND (media_path IS NULL OR media_path = '')
          AND (transcript IS NULL OR transcript = '')
    """).fetchall()
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(rows)} –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π", flush=True)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º: —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ <5 –º–∏–Ω—É—Ç —Å–æ –∑–≤—É–∫–æ–º
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é...", flush=True)
    to_download = []
    skipped_images = 0
    skipped_long = 0
    skipped_nosound = 0
    
    for idx, (chat_id, message_id, json_str) in enumerate(rows):
        if idx % 1000 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(rows)}...", flush=True)
        
        is_media, media_type, has_sound = is_audio_or_video(json_str)
        
        if not is_media:
            skipped_images += 1
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
        if not has_sound:
            skipped_nosound += 1
            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
            conn.execute(
                "UPDATE messages SET transcript = '[–ë–ï–ó –ó–í–£–ö–ê]', media_kind = ? WHERE chat_id = ? AND message_id = ?",
                (media_type, chat_id, message_id)
            )
            continue
        
        duration = get_duration(json_str)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ >5 –º–∏–Ω—É—Ç
        if duration is not None and duration > 300:
            skipped_long += 1
            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î
            conn.execute(
                "UPDATE messages SET long_media = 1 WHERE chat_id = ? AND message_id = ?",
                (chat_id, message_id)
            )
            continue
        
        to_download.append((chat_id, message_id, json_str, media_type, duration))
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î...", flush=True)
    conn.commit()
    print("‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", flush=True)
    
    print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", flush=True)
    print(f"   –ê—É–¥–∏–æ/–≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(to_download)}", flush=True)
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: {skipped_images}", flush=True)
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö (>5 –º–∏–Ω): {skipped_long}", flush=True)
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –∑–≤—É–∫–∞ (nosound): {skipped_nosound}", flush=True)
    
    if not to_download:
        print("\n‚úì –ù–µ—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", flush=True)
        conn.close()
        return
    
    # –°–æ–∑–¥–∞—ë–º Telegram –∫–ª–∏–µ–Ω—Ç
    print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...", flush=True)
    print(f"   API ID: {api_id[:5]}...", flush=True)
    print(f"   Session: {'StringSession' if session_string else 'anon'}", flush=True)
    
    if session_string:
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å StringSession...", flush=True)
        client = TelegramClient(StringSession(session_string), int(api_id), api_hash)
    else:
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...", flush=True)
        client = TelegramClient("anon", int(api_id), api_hash)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ FloodWait
    client.flood_sleep_threshold = 60  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥
    
    print("   –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...", flush=True)
    async with client:
        print("   –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤...", flush=True)
        await client.get_dialogs(limit=None)
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram", flush=True)
        
        print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(to_download)} —Ñ–∞–π–ª–æ–≤...", flush=True)
        print(f"   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {PARALLEL_DOWNLOADS} –ø–æ—Ç–æ–∫–æ–≤", flush=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        semaphore = asyncio.Semaphore(PARALLEL_DOWNLOADS)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        tasks = []
        for idx, (chat_id, message_id, json_str, media_type, duration) in enumerate(to_download, 1):
            task = download_one_file(
                client, semaphore, conn, 
                idx, len(to_download),
                chat_id, message_id, json_str, media_type, duration
            )
            tasks.append(task)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        start_time = time.time()
        results = await asyncio.gather(*tasks, return_exceptions=True)
        total_time = time.time() - start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        downloaded = sum(1 for r in results if isinstance(r, dict) and r.get("status") == "downloaded")
        exists = sum(1 for r in results if isinstance(r, dict) and r.get("status") == "exists")
        failed = sum(1 for r in results if isinstance(r, dict) and r.get("status") in ["failed", "error", "no_media"])
        skipped_long = sum(1 for r in results if isinstance(r, dict) and r.get("status") == "too_long")
    
    conn.close()
    
    print(f"\n{'='*60}")
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {total_time/60:.1f} –º–∏–Ω—É—Ç!")
    print(f"   –°–∫–∞—á–∞–Ω–æ: {downloaded}")
    print(f"   –£–∂–µ –±—ã–ª–æ: {exists}")
    print(f"   –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ: {skipped_long}")
    print(f"   –û—à–∏–±–æ–∫: {failed}")
    print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(to_download)}")
    if downloaded > 0:
        print(f"   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {downloaded/(total_time/60):.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω")


if __name__ == "__main__":
    asyncio.run(main())

